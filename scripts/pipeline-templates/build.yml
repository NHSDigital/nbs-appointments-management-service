parameters:
  - name: prBuildServiceConnectionName
    type: string
  - name: prDockerServiceConnectionName
    type: string

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: "Build"
        variables:
          apiProjectPath: "src/api/Nhs.Appointments.Api/Nhs.Appointments.Api.csproj"
          apiUnitTestProjectPath: "tests/Nhs.Appointments.Api.UnitTests/Nhs.Appointments.Api.UnitTests.csproj"
          coreUnitTestProjectPath: "tests/Nhs.Appointments.Core.UnitTests/Nhs.Appointments.Core.UnitTests.csproj"
          persistanceUnitTestProjectPath: "tests/Nhs.Appointments.Persistance.UnitTests/Nhs.Appointments.Persistance.UnitTests.csproj"
          bookingExtractsTestProjectPath: "tests/BookingDataExtracts.UnitTests/BookingDataExtracts.UnitTests.csproj"
          capacityExtractsTestProjectPath: "tests/CapacityDataExtracts.UnitTests/CapacityDataExtracts.UnitTests.csproj"
          cosmosDbSeederTestProjectPath: "tests/CosmosDbSeederTests/CosmosDbSeederTests.csproj"
          bookingExtractDockerFilePath: "BookingDataExtractDockerfile"
          capacityExtractDockerFilePath: "CapacityDataExtractDockerfile"
        steps:
          - task: PowerShell@2
            displayName: "Extract MYA version"
            name: ExtractVersionStep
            inputs:
              targetType: "inline"
              script: |
                .\scripts\extract-version.ps1 -branchName "$(Build.SourceBranch)" -buildNumber "$(Build.BuildNumber)"
              pwsh: true
          - task: PowerShell@2
            displayName: "Print MYA version"
            inputs:
              targetType: "inline"
              script: |
                Write-Host "Building MYA version: $(extractedBuildNumber)"
              pwsh: true
          - task: SonarCloudPrepare@3
            displayName: "Prepare analysis on SonarCloud"
            inputs:
              SonarCloud: "nhsdigital-sonarcloud"
              organization: "nhsdigital"
              scannerMode: "dotnet"
              projectKey: "NHSDigital_nbs-appointments-management-service"
              projectName: "nbs-appointments-management-service"
              extraProperties: |
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
                sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml
                sonar.scanner.scanAll=false
                sonar.coverage.exclusions=**/FunctionConfigurationExtensions.cs,**/ServiceRegistration.cs,**/ConsoleLogNotifications.cs,**/Program.cs,**/Nhs.Appointments.Persistance/**
          - task: PowerShell@2
            displayName: "Run script tests"
            inputs:
              targetType: "inline"
              script: |
                Set-Location ./scripts
                Invoke-Pester
              pwsh: true
          - task: DotNetCoreCLI@2
            displayName: "dotnet Publish"
            inputs:
              command: publish
              publishWebProjects: false
              projects: $(apiProjectPath)
              arguments: "--output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: false
              modifyOutputPath: false
          - task: DotNetCoreCLI@2
            displayName: "Run Api Unit Tests"
            inputs:
              command: "test"
              projects: $(apiUnitTestProjectPath)
              arguments: '--collect "XPlat Code Coverage;Format=opencover"'
          - task: DotNetCoreCLI@2
            displayName: "Run Core Unit Tests"
            inputs:
              command: "test"
              projects: $(coreUnitTestProjectPath)
              arguments: '--collect "XPlat Code Coverage;Format=opencover"'
          - task: DotNetCoreCLI@2
            displayName: "Run Persistance Unit Tests"
            inputs:
              command: "test"
              projects: $(persistanceUnitTestProjectPath)
              arguments: '--collect "XPlat Code Coverage;Format=opencover"'
          - task: DotNetCoreCLI@2
            displayName: "Run Booking Extracts unit tests"
            inputs:
              command: "test"
              projects: $(bookingExtractsTestProjectPath)
              arguments: '--collect "XPlat Code Coverage;Format=opencover"'
          - task: DotNetCoreCLI@2
            displayName: "Run Capacity Extracts unit tests"
            inputs:
              command: "test"
              projects: $(capacityExtractsTestProjectPath)
              arguments: '--collect "XPlat Code Coverage;Format=opencover"'
          - task: DotNetCoreCLI@2
            displayName: "Run Cosmos Db Seeder tests"
            inputs:
              command: "test"
              projects: $(cosmosDbSeederTestProjectPath)
              arguments: '--collect "XPlat Code Coverage;Format=opencover"'
          - task: SonarCloudAnalyze@3
            displayName: "Run Code Analysis"
          - task: SonarCloudPublish@3
            displayName: "Publish Sonar cloud results"
            inputs:
              pollingTimeoutSec: "300"
          - task: ArchiveFiles@2
            displayName: Zip Api
            inputs:
              rootFolderOrFile: $(Build.ArtifactStagingDirectory)
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/out/mya-api-$(Build.BuildId).zip"
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            displayName: "Publish API Artifact"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/out"
              ArtifactName: "drop_api"
              publishLocation: "Container"
          - task: UseNode@1
            displayName: "Install Node"
            inputs:
              version: 20.x
          - script: |
              cd ./src/client
              npm ci 
              npm run lint
              npm run format:check
              npm run test:ci
            displayName: "Run Web App Tests"
          - script: |
              cd ./src/client
              npm run tsc
            displayName: "Check TypeScript Syntax"
            continueOnError: false
          - script: |
              cd ./src/client
              npm run lint
            displayName: "Run ESLint"
            continueOnError: false
          - task: PublishTestResults@2
            displayName: "Publish Web App Test Results"
            inputs:
              testResultsFiles: "junit.xml"
              testRunTitle: NBS Appointments Management Service Client Tests
              testResultsFormat: "JUnit"
              publishRunAttachments: true
              searchFolder: "$(Build.SourcesDirectory)/src/client"
            condition: succeededOrFailed()
          - script: |
              cd ./src/client
              npm run build
              mv .next/static .next/standalone/.next/static
            displayName: "Build Web App"
            env:
              BUILD_NUMBER: "$(extractedBuildNumber)"
          - task: ArchiveFiles@2
            displayName: Zip Web Client
            inputs:
              rootFolderOrFile: "$(Build.SourcesDirectory)/src/client/.next"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/web/next.zip"
          - task: PublishBuildArtifacts@1
            displayName: "Publish Web App"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/web"
              ArtifactName: "drop_web"
              publishLocation: "Container"
          - task: Docker@2
            displayName: Build and push booking extract image to container registry
            inputs:
              command: buildAndPush
              repository: booking-extract
              dockerfile: $(bookingExtractDockerFilePath)
              containerRegistry: ${{parameters.prDockerServiceConnectionName}}
              tags: |
                $(extractedBuildNumber)
          - task: Docker@2
            displayName: Build and push capacity extract image to container registry
            inputs:
              command: buildAndPush
              repository: capacity-extract
              dockerfile: $(capacityExtractDockerFilePath)
              containerRegistry: ${{parameters.prDockerServiceConnectionName}}
              tags: |
                $(extractedBuildNumber)
          - task: PublishBuildArtifacts@1
            displayName: "Publish Terraform"
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/infrastructure"
              ArtifactName: "drop_terraform"
              publishLocation: "Container"
          - task: PublishBuildArtifacts@1
            displayName: "Publish Scripts"
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/scripts"
              ArtifactName: "drop_scripts"
              publishLocation: "Container"

      - job: RunIntegrationAndE2ETests
        displayName: "Run integration and E2E tests"
        variables:
          PFX_CERT_PATH: "$(Build.SourcesDirectory)/.aspnet/https"
          integrationTestProjectPath: "tests/Nhs.Appointments.Api.Integration/Nhs.Appointments.Api.Integration.csproj"
          bookingDataExtractTestProjectPath: "tests/BookingDataExtractTests/BookingDataExtracts.Integration.csproj"
          capacityDataExtractTestProjectPath: "tests/CapacityDataExtracts.Integration/CapacityDataExtracts.Integration.csproj"
          cosmosDbSeederProjectPath: "data/CosmosDbSeeder/CosmosDbSeeder.csproj"
          prBuildResourceGroup: "nbs-myacicd-rg-int-uks"
          subscriptionId: "2cf44e0d-817d-4596-b471-0788f8a14ab2"
        steps:
          - powershell: |
              $ShortCommitHash = "$(Build.SourceVersion)".Substring(0, 7)
              $CosmosAccountName = "nbs-myacicd-$ShortCommitHash-cdb-int-uks"
              Write-Host "##vso[task.setVariable variable=cosmosAccountName]$CosmosAccountName"
            displayName: Set short commit hash
          - task: AzureCLI@2
            displayName: "Create Cosmos DB account"
            inputs:
              azureSubscription: ${{parameters.prBuildServiceConnectionName}}
              scriptType: pscore
              scriptLocation: scriptPath
              scriptPath: "$(Build.SourcesDirectory)/scripts/cosmos-build/create_cosmos_db.ps1"
              arguments: "-resourceGroup $(prBuildResourceGroup) -cosmosAccountName $(cosmosAccountName) -subscriptionId $(subscriptionId)"
          - task: AzureCLI@2
            displayName: "Get Cosmos DB account connection string"
            inputs:
              azureSubscription: ${{parameters.prBuildServiceConnectionName}}
              scriptType: pscore
              scriptLocation: scriptPath
              scriptPath: "$(Build.SourcesDirectory)/scripts/cosmos-build/get_cosmos_connection_string.ps1"
              arguments: "-resourceGroup $(prBuildResourceGroup) -cosmosAccountName $(cosmosAccountName)"
          - script: |
              mkdir -p $(PFX_CERT_PATH)
              dotnet dev-certs https -ep $(PFX_CERT_PATH)/aspnetapp.pfx -p password
            displayName: "Create aspnet developer certificate"
          - script: |
              cd data && docker compose up --build --detach
            displayName: "Start MESH docker container"
          - script: |
              docker compose up --build --detach
            displayName: "Start application docker containers"
            env:
              COSMOS_ENDPOINT: $(COSMOS_ENDPOINT)
              COSMOS_TOKEN: $(COSMOS_TOKEN)
              BUILD_NUMBER: "$(extractedBuildNumber)"
          - task: DotNetCoreCLI@2
            displayName: "Run Booking Data Extract Integration Tests"
            inputs:
              command: "test"
              projects: "$(bookingDataExtractTestProjectPath)"
              arguments: '--logger:"trx;logfilename=myaBookingDataExtractTests.trx";verbosity=detailed'
            env:
              COSMOS_ENDPOINT: $(COSMOS_ENDPOINT)
              COSMOS_TOKEN: $(COSMOS_TOKEN)
          - task: PublishTestResults@2
            displayName: "Publish booking data extract integration test results"
            inputs:
              searchFolder: $(Agent.TempDirectory)
              testResultsFormat: "VSTest"
              testResultsFiles: "myaBookingDataExtractTests.trx"
              testRunTitle: "MYA Data Extract Integration Tests"
              publishRunAttachments: true
            condition: succeededOrFailed()
          - task: DotNetCoreCLI@2
            displayName: "Run Capacity Data Extract Integration Tests"
            inputs:
              command: "test"
              projects: "$(capacityDataExtractTestProjectPath)"
              arguments: '--logger:"trx;logfilename=myaCapacityDataExtractTests.trx";verbosity=detailed'
            env:
              COSMOS_ENDPOINT: $(COSMOS_ENDPOINT)
              COSMOS_TOKEN: $(COSMOS_TOKEN)
          - task: PublishTestResults@2
            displayName: "Publish capacity data extract integration test results"
            inputs:
              searchFolder: $(Agent.TempDirectory)
              testResultsFormat: "VSTest"
              testResultsFiles: "myaCapacityDataExtractTests.trx"
              testRunTitle: "MYA Data Extract Integration Tests"
              publishRunAttachments: true
            condition: succeededOrFailed()
          - task: DotNetCoreCLI@2
            displayName: "Reset and seed Cosmos DB containers"
            inputs:
              command: "run"
              projects: $(cosmosDbSeederProjectPath)
              arguments: "delete-containers"
            env:
              COSMOS_ENDPOINT: $(COSMOS_ENDPOINT)
              COSMOS_TOKEN: $(COSMOS_TOKEN)
          - task: DotNetCoreCLI@2
            displayName: "Run Integration Tests"
            inputs:
              command: "test"
              projects: "$(integrationTestProjectPath)"
              arguments: '--logger:"trx;logfilename=myaServiceTests.trx";verbosity=detailed'
            env:
              COSMOS_ENDPOINT: $(COSMOS_ENDPOINT)
              COSMOS_TOKEN: $(COSMOS_TOKEN)
          - task: PublishTestResults@2
            displayName: "Publish integration test results"
            inputs:
              searchFolder: $(Agent.TempDirectory)
              testResultsFormat: "VSTest"
              testResultsFiles: "myaServiceTests.trx"
              testRunTitle: "NBS Appointments Management Service Integration Tests"
              publishRunAttachments: true
            condition: succeededOrFailed()
          - task: DotNetCoreCLI@2
            displayName: "Reset and seed Cosmos DB containers"
            inputs:
              command: "run"
              projects: $(cosmosDbSeederProjectPath)
              arguments: "delete-containers"
            env:
              COSMOS_ENDPOINT: $(COSMOS_ENDPOINT)
              COSMOS_TOKEN: $(COSMOS_TOKEN)
          - script: |
              docker compose restart api
            displayName: "Restart api docker container to clear cache"
          - task: UseNode@1
            displayName: "Install Node"
            inputs:
              version: 20.x
          - script: |
              cd ./src/client
              npm ci
              npx playwright install --with-deps chromium
              npm run test:e2e
            displayName: "Run E2E tests"
            env:
              CI: "true"
              SEED_COSMOS_BEFORE_RUN: "false"
              BUILD_NUMBER: "$(extractedBuildNumber)"
          - task: PublishTestResults@2
            displayName: "Publish E2E test results"
            condition: succeededOrFailed()
            inputs:
              searchFolder: "src/client/testing"
              testResultsFormat: "JUnit"
              testResultsFiles: "e2e-junit-results.xml"
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: "NBS Appointments Management Service End-To-End Tests"
          - task: PublishBuildArtifacts@1
            displayName: "Publish E2E test artifacts"
            condition: succeededOrFailed()
            inputs:
              PathtoPublish: "src/client/test-artifacts"
              ArtifactName: "E2E Test-results"
          - task: AzureCLI@2
            displayName: "Delete Cosmos DB account"
            condition: or(succeeded(), canceled())
            inputs:
              azureSubscription: ${{parameters.prBuildServiceConnectionName}}
              scriptType: pscore
              scriptLocation: scriptPath
              scriptPath: "$(Build.SourcesDirectory)/scripts/cosmos-build/delete_cosmos_db.ps1"
              arguments: "-resourceGroup $(prBuildResourceGroup) -cosmosAccountName $(cosmosAccountName) -subscriptionId $(subscriptionId)"
