trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azure_devops_subscription_name: 'nbs-appts-rg-dev'
  azure_subscription_id: '07748954-52d6-46ce-95e6-2701bfc715b4'
  buildConfiguration: "Release"
  apiProjectPath: "src/api/Nhs.Appointments.Api/Nhs.Appointments.Api.csproj"
  apiUnitTestProjectPath: "tests/Nhs.Appointments.Api.UnitTests/Nhs.Appointments.Api.UnitTests.csproj"
  coreUnitTestProjectPath: "tests/Nhs.Appointments.Core.UnitTests/Nhs.Appointments.Core.UnitTests.csproj"
  persistanceUnitTestProjectPath: "tests/Nhs.Appointments.Persistance.UnitTests/Nhs.Appointments.Persistance.UnitTests.csproj"
  functionAppName: nbs-appts-func-dev-uks
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: "Build"
        steps:
          - task: DotNetCoreCLI@2
            displayName: dotnet Publish
            inputs:
              command: publish
              publishWebProjects: false
              projects: "$(apiProjectPath)"
              arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
              zipAfterPublish: false
              modifyOutputPath: false
          - task: DotNetCoreCLI@2
            displayName: "Run Api Unit Tests"
            inputs:
              command: "test"
              projects: "$(apiUnitTestProjectPath)"
          - task: DotNetCoreCLI@2
            displayName: "Run Core Unit Tests"
            inputs:
              command: "test"
              projects: "$(coreUnitTestProjectPath)"
          - task: DotNetCoreCLI@2
            displayName: "Run Persistance Unit Tests"
            inputs:
              command: "test"
              projects: "$(persistanceUnitTestProjectPath)"
          - task: ArchiveFiles@2
            displayName: Zip Api
            inputs:
              rootFolderOrFile: "$(Build.ArtifactStagingDirectory)"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/out/appts-api-$(Build.BuildId).zip"
              replaceExistingArchive: true
          - task: PublishBuildArtifacts@1
            displayName: "Publish API Artifact"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/out"
              ArtifactName: "drop_api"
              publishLocation: "Container"
          - task: PublishBuildArtifacts@1
            displayName: "Publish Terraform"
            inputs:
              PathtoPublish: "$(Build.SourcesDirectory)/infrastructure"
              ArtifactName: "drop_terraform"
              publishLocation: "Container"
          - task: UseNode@1
            displayName: "Install Node"
            inputs:
              version: 20.x
          - script: |
              cd ./src/client
              npm install 
              npm run test:ci
            displayName: "Run Web Client Tests"
          - task: PublishTestResults@2
            displayName: "Publish Web Client Test Results"
            inputs:
              testResultsFiles: "junit.xml"
              testRunTitle: NBS Appointments Management Service Client Tests
              testResultsFormat: "JUnit"
              publishRunAttachments: true
              searchFolder: '$(Build.SourcesDirectory)'
          - task: CopyFiles@2
            displayName: "Copy Client Files"
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)/src/client"
              Contents: |
                **/*
                !node_modules/**/*
                !junit.xml
              TargetFolder: "$(Build.ArtifactStagingDirectory)/client"
          - task: PublishBuildArtifacts@1
            displayName: "Publish Web Client"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/client"
              ArtifactName: "drop_web"
              publishLocation: "Container"
      - job: "RunIntegrationTests"
        displayName: Run integration tests
        pool:
          vmImage: windows-latest
        steps:
          - task: Powershell@2
            displayName: 'Install Azure Functions Core Tools'
            inputs:
              targetType: 'inline'
              pwsh: true
              script: |
                choco install azure-functions-core-tools --params "'/x64'"
          - task: PowerShell@2
            displayName: 'Starting Cosmos Emulator'
            inputs:
              targetType: 'inline'
              pwsh: true
              script: |
                Write-Host "Starting CosmosDB Emulator"
                Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
                $startEmulatorCmd = "Start-CosmosDbEmulator -NoFirewall -NoUI -Timeout 900"
                Invoke-Expression -Command $startEmulatorCmd
          - task: PowerShell@2
            displayName: Run integration tests
            inputs:
              targetType: inline
              pwsh: true
              script: |
                cd .\src\api\Nhs.Appointments.Api\
                Write-Host "Starting function host"
                $job = Start-Job -ScriptBlock {func start}
                Start-Sleep -Seconds 10

                $timeout = 0
                do {
                  [string[]]$jobConsole = $job | Receive-Job -ErrorAction SilentlyContinue
                  if ($jobConsole)
                  {
                    $funcStarted = $jobConsole -match "For detailed output, run func with --verbose flag."
                  }
                  $jobConsole
                  Start-Sleep -Seconds 5
                  $timeout++
                  if ($timeout -gt 60) {
                    throw "Timeout waiting for function to start"
                  }
                } until ($funcStarted)

                Write-Host "Web host started successfully"

                cd ..\..\..\tests\Nhs.Appointments.Api.Integration\
                Write-Host "Running integration tests..."
                dotnet test --logger:"trx;logfilename=apptsServiceTests.trx"    
          - task: PublishTestResults@2
            displayName: 'Publish API Test Results'
            inputs:
              testResultsFiles: 'apptsServiceTests.trx'
              testRunTitle: NBS Appointments Management Service Integration Tests
              testResultsFormat: 'VSTest'
              publishRunAttachments: true
              searchFolder: '$(System.DefaultWorkingDirectory)\tests\Nhs.Appointments.Api.Integration\TestResults'
            condition: succeededOrFailed()

  - stage: DeployDev
    condition: and(succeeded(), eq(variables.isMain, true))
    displayName: Deploy Dev
    jobs:

      - job: RunTerraformPlan
        displayName: Run Terraform Plan
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: Download Terraform Artifact
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop_terraform'
              downloadPath: '$(Pipeline.Workspace)'
          - task: AzureCLI@2
            displayName: 'Run Terraform Plan'
            inputs:
              scriptType: pscore
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              azureSubscription: $(azure_devops_subscription_name)
              inlineScript: |
                $env:ARM_CLIENT_ID=$env:servicePrincipalId
                $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
                $env:ARM_TENANT_ID=$env:tenantId
                $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
                cd $(Pipeline.Workspace)\drop_terraform\environments\dev
                terraform init
                terraform plan -no-color -input=false -var="API_KEYS=$(API_KEYS)" -var="APIM_SUBSCRIPTION_KEY=$(APIM_SUBSCRIPTION_KEY)"

      - job: "ApproveTerraformPlan"
        dependsOn: RunTerraformPlan
        displayName: Approve Terraform Plan
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: 'Review Terraform Plan'
            inputs:
              notifyUsers: ''
              instructions: Review plan and approve

      - deployment: ApplyTerraform
        dependsOn: ApproveTerraformPlan
        displayName: "Apply Terraform"
        environment: nbs-appts-dev
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadBuildArtifacts@0
                  displayName: Download Terraform Artifact
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'drop_terraform'
                    downloadPath: '$(Pipeline.Workspace)'
                - task: AzureCLI@2
                  displayName: 'Apply Terraform'
                  name: ApplyTerraformTask
                  inputs:
                    scriptType: pscore
                    scriptLocation: inlineScript
                    addSpnToEnvironment: true
                    azureSubscription: $(azure_devops_subscription_name)
                    inlineScript: |
                      $env:ARM_CLIENT_ID=$env:servicePrincipalId
                      $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
                      $env:ARM_TENANT_ID=$env:tenantId
                      $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
                      cd $(Pipeline.Workspace)\drop_terraform\environments\dev
                      terraform init
                      terraform apply -no-color -input=false -auto-approve -var="API_KEYS=$(API_KEYS)" -var="APIM_SUBSCRIPTION_KEY=$(APIM_SUBSCRIPTION_KEY)"
                      $webStorageName = terraform output -raw web_storage_name
                      $funcAppUrl =  terraform output -raw func_app_url
                      write-host "Storing WebStorageName: $webStorageName"
                      write-host "Storing FuncAppUrl: $funcAppUrl"
                      Write-Host "##vso[task.setvariable variable=FuncAppUrl;isoutput=true]$funcAppUrl"
                      Write-Host "##vso[task.setvariable variable=WebStorageName;isoutput=true]$webStorageName"

      - job: "DeployWeb"
        dependsOn: ApplyTerraform
        displayName: Deploy Web
        variables:
          funcAppUrl: $[dependencies.ApplyTerraform.outputs['ApplyTerraform.ApplyTerraformTask.FuncAppUrl']]
          webStorageName: $[dependencies.ApplyTerraform.outputs['ApplyTerraform.ApplyTerraformTask.WebStorageName']]
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: Download Web Artifact
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop_web'
              downloadPath: '$(Pipeline.Workspace)'
          - task: PowerShell@2
            name: BuildWeb
            displayName: Build Web
            inputs:
              targetType: 'inline'
              workingDirectory: '$(Pipeline.Workspace)'
              script: |
                cd drop_web
                write-host "Building web with endpoint: $(funcAppUrl)"
                npm install
                ($env:REACT_APP_API_URL = "https://$(funcAppUrl)/api") -and (npm run build)
          - task: AzureCLI@2
            name: UploadWeb
            displayName: 'Deploy Web'
            inputs:
              scriptType: pscore
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              azureSubscription: $(azure_devops_subscription_name)
              workingDirectory: '$(Pipeline.Workspace)\drop_web'
              inlineScript: |
                az storage blob upload-batch -d "`$web" --account-name $(webStorageName) -s build --overwrite

      - job: "DeployApi"
        dependsOn: ApplyTerraform
        displayName: Deploy Api
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: Download Api Artifact
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop_api'
              downloadPath: '$(Pipeline.Workspace)'
          - task: AzureFunctionApp@2
            displayName: Deploy Api
            inputs:
              connectedServiceNameARM: $(azure_devops_subscription_name)
              appType: 'functionApp'
              appName: '$(functionAppName)'
              package: '$(Pipeline.Workspace)/**/*.zip'
              deploymentMethod: 'auto'