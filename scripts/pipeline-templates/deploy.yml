parameters:
  - name: env
    type: string
  - name: variable_group
    type: string
  - name: httpFunctionAppName
    type: string
  - name: highLoadFunctionAppName
    type: string
  - name: serviceBusFunctionAppName
    type: string
  - name: timerFunctionAppName
    type: string
  - name: webServerName
    type: string
  - name: cosmosAccountName
    type: string
  - name: resourceGroup
    type: string
  - name: serviceConnectionName
    type: string
  - name: isMain
    type: string

stages:
  - stage: Deploy${{parameters.env}}
    displayName: Deploy ${{parameters.env}}
    dependsOn: Build
#    condition: and(succeeded(), eq(${{parameters.isMain}}, true))
    condition: succeeded()
    variables:
      - group: ${{parameters.variable_group}}
    jobs:
      - job: RunTerraformPlan
        displayName: "Run Terraform Plan"
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: Download Terraform Artifact
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop_terraform"
              downloadPath: $(Pipeline.Workspace)
          - task: AzureCLI@2
            displayName: "Run Terraform Plan"
            inputs:
              scriptType: pscore
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              azureSubscription: ${{parameters.serviceConnectionName}}
              inlineScript: |
                $env:ARM_CLIENT_ID=$env:servicePrincipalId
                $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
                $env:ARM_TENANT_ID=$env:tenantId
                $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
                cd $(Pipeline.Workspace)\drop_terraform\environments\${{parameters.env}}
                terraform init
                terraform plan -no-color -input=false -var="GOV_NOTIFY_API_KEY=$(GOV_NOTIFY_API_KEY)" -var="SPLUNK_HEC_TOKEN=$(SPLUNK_HEC_TOKEN)" -var="AUTH_PROVIDER_CLIENT_SECRET=$(AUTH_PROVIDER_CLIENT_SECRET)"
      - job: ApproveTerraformPlan
        dependsOn: RunTerraformPlan
        displayName: "Approve Terraform Plan"
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: "Review Terraform Plan"
            inputs:
              notifyUsers: ""
              instructions: Review plan and approve
      - deployment: ApplyTerraform
        dependsOn: ApproveTerraformPlan
        displayName: "Apply Terraform"
        environment: nbs-mya-${{parameters.env}}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadBuildArtifacts@0
                  displayName: Download Terraform Artifact
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "drop_terraform"
                    downloadPath: $(Pipeline.Workspace)
                - task: AzureCLI@2
                  displayName: "Apply Terraform"
                  name: ApplyTerraformTask
                  inputs:
                    scriptType: pscore
                    scriptLocation: inlineScript
                    addSpnToEnvironment: true
                    azureSubscription: ${{parameters.serviceConnectionName}}
                    inlineScript: |
                      $env:ARM_CLIENT_ID=$env:servicePrincipalId
                      $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
                      $env:ARM_TENANT_ID=$env:tenantId
                      $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
                      cd $(Pipeline.Workspace)\drop_terraform\environments\${{parameters.env}}
                      terraform init
                      terraform apply -no-color -input=false -auto-approve -var="GOV_NOTIFY_API_KEY=$(GOV_NOTIFY_API_KEY)" -var="SPLUNK_HEC_TOKEN=$(SPLUNK_HEC_TOKEN)" -var="AUTH_PROVIDER_CLIENT_SECRET=$(AUTH_PROVIDER_CLIENT_SECRET)"
      - job: DeployWeb
        dependsOn: ApplyTerraform
        displayName: "Deploy webapp"
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: "Download Web App Artifact"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop_web"
              downloadPath: $(Pipeline.Workspace)
          - task: AzureWebApp@1
            displayName: "Deploy Web App"
            inputs:
              azureSubscription: ${{parameters.serviceConnectionName}}
              appType: "webAppLinux"
              appName: ${{parameters.webServerName}}
              package: "$(Pipeline.Workspace)/drop_web/next.zip"
              deploymentMethod: "auto"
              startUpCommand: "node standalone/server.js"
              ${{ if eq(parameters.env, 'exp') }}:
                deployToSlotOrASE: true
                slotName: "preview"
      - job: DeployHttpFunctionApp
        dependsOn: ApplyTerraform
        displayName: "Deploy http function app"
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: "Download Api Artifact"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop_api"
              downloadPath: $(Pipeline.Workspace)
          - task: AzureFunctionApp@2
            displayName: "Deploy"
            inputs:
              connectedServiceNameARM: ${{parameters.serviceConnectionName}}
              appType: "functionApp"
              appName: ${{parameters.httpFunctionAppName}}
              package: "$(Pipeline.Workspace)/drop_api/*.zip"
              deploymentMethod: "auto"
              ${{ if eq(parameters.env, 'exp') }}:
                deployToSlotOrASE: true
                slotName: "preview"
      - job: DeployHighLoadFunctionApp
        dependsOn: ApplyTerraform
        condition: and(succeeded(), ${{ eq(parameters.env, 'exp') }})
        displayName: "Deploy high load function app"
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: "Download Api Artifact"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop_api"
              downloadPath: $(Pipeline.Workspace)
          - task: AzureFunctionApp@2
            displayName: "Deploy"
            inputs:
              connectedServiceNameARM: ${{parameters.serviceConnectionName}}
              appType: "functionApp"
              appName: ${{parameters.highLoadFunctionAppName}}
              package: "$(Pipeline.Workspace)/drop_api/*.zip"
              deploymentMethod: "auto"
              deployToSlotOrASE: true
              slotName: "preview"
      - job: DeployServiceBusFunctionApp
        dependsOn: ApplyTerraform
        displayName: "Deploy service bus function app"
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: "Download Api Artifact"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop_api"
              downloadPath: $(Pipeline.Workspace)
          - task: AzureFunctionApp@2
            displayName: "Deploy"
            inputs:
              connectedServiceNameARM: ${{parameters.serviceConnectionName}}
              appType: "functionApp"
              appName: ${{parameters.serviceBusFunctionAppName}}
              package: "$(Pipeline.Workspace)/drop_api/*.zip"
              deploymentMethod: "auto"
              ${{ if eq(parameters.env, 'exp') }}:
                deployToSlotOrASE: true
                slotName: "preview"
      - job: DeployTimerFunctionApp
        dependsOn: ApplyTerraform
        displayName: "Deploy timer function app"
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: "Download Api Artifact"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop_api"
              downloadPath: $(Pipeline.Workspace)
          - task: AzureFunctionApp@2
            displayName: "Deploy"
            inputs:
              connectedServiceNameARM: ${{parameters.serviceConnectionName}}
              appType: "functionApp"
              appName: ${{parameters.timerFunctionAppName}}
              package: "$(Pipeline.Workspace)/drop_api/*.zip"
              deploymentMethod: "auto"
              ${{ if eq(parameters.env, 'exp') }}:
                deployToSlotOrASE: true
                slotName: "preview"
      - job: UploadCosmosDocuments
        displayName: "Upload documents to cosmosdb"
        dependsOn:
          - DeployWeb
          - DeployHttpFunctionApp
          - DeployHighLoadFunctionApp
          - DeployServiceBusFunctionApp
          - DeployTimerFunctionApp
        condition: |
          and
          (
            in(dependencies.DeployWeb.result, 'Succeeded'),
            in(dependencies.DeployHttpFunctionApp.result, 'Succeeded'),
            in(dependencies.DeployHighLoadFunctionApp.result, 'Succeeded', 'Skipped'),
            in(dependencies.DeployServiceBusFunctionApp.result, 'Succeeded'),
            in(dependencies.DeployHttpFunctionApp.result, 'Succeeded'),
            in(dependencies.DeployTimerFunctionApp.result, 'Succeeded')
          )
        variables:
          environment: ${{parameters.env}}
        steps:
          - checkout: self
          - task: AzureCLI@2
            displayName: "Get Cosmos DB account connection string"
            inputs:
              azureSubscription: ${{parameters.serviceConnectionName}}
              scriptType: pscore
              scriptLocation: scriptPath
              scriptPath: "$(Build.SourcesDirectory)/scripts/cosmos-build/get_cosmos_connection_string.ps1"
              arguments: "-resourceGroup ${{parameters.resourceGroup}} -cosmosAccountName ${{parameters.cosmosAccountName}}"
          - task: DotNetCoreCLI@2
            displayName: "Seed Cosmos DB containers"
            inputs:
              command: "run"
              projects: "data/CosmosDbSeeder/CosmosDbSeeder.csproj"
            env:
              COSMOS_ENDPOINT: $(COSMOS_ENDPOINT)
              COSMOS_TOKEN: $(COSMOS_TOKEN)
      - job: WaitForSlotApproval
        dependsOn:
          - UploadCosmosDocuments
        condition: and(succeeded(), ${{ eq(parameters.env, 'exp') }})
        displayName: "Wait for approval to swap slots"
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: "Review deployment slots"
            inputs:
              notifyUsers: ""
              instructions: Review deployment slots for web app / api and approve
      - job: SwapWebAppSlots
        displayName: "Swap web app slots"
        dependsOn: WaitForSlotApproval
        condition: and(succeeded(), ${{ eq(parameters.env, 'exp') }})
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: ${{parameters.serviceConnectionName}}
              Action: 'Swap Slots'
              WebAppName: ${{parameters.webServerName}}
              ResourceGroupName: ${{parameters.resourceGroup}}
              SourceSlot: 'preview'
      - job: SwapHttpFuncAppSlots
        displayName: "Swap http function app slots"
        dependsOn: WaitForSlotApproval
        condition: and(succeeded(), ${{ eq(parameters.env, 'exp') }})
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: ${{parameters.serviceConnectionName}}
              Action: "Swap Slots"
              WebAppName: ${{parameters.httpFunctionAppName}}
              ResourceGroupName: ${{parameters.resourceGroup}}
              SourceSlot: "preview"
      - job: SwapHighLoadFuncAppSlots
        displayName: "Swap high load function app slots"
        dependsOn: WaitForSlotApproval
        condition: and(succeeded(), ${{ eq(parameters.env, 'exp') }})
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: ${{parameters.serviceConnectionName}}
              Action: "Swap Slots"
              WebAppName: ${{parameters.highLoadFunctionAppName}}
              ResourceGroupName: ${{parameters.resourceGroup}}
              SourceSlot: "preview"
      - job: SwapServiceBusFuncAppSlots
        displayName: "Swap servicebus function app slots"
        dependsOn: WaitForSlotApproval
        condition: and(succeeded(), ${{ eq(parameters.env, 'exp') }})
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: ${{parameters.serviceConnectionName}}
              Action: 'Swap Slots'
              WebAppName: ${{parameters.serviceBusFunctionAppName}}
              ResourceGroupName: ${{parameters.resourceGroup}}
              SourceSlot: "preview"
      - job: SwapTimerFuncAppSlots
        displayName: "Swap timer function app slots"
        dependsOn: WaitForSlotApproval
        condition: and(succeeded(), ${{ eq(parameters.env, 'exp') }})
        steps:
          - checkout: none
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: ${{parameters.serviceConnectionName}}
              Action: "Swap Slots"
              WebAppName: ${{parameters.timerFunctionAppName}}
              ResourceGroupName: ${{parameters.resourceGroup}}
              SourceSlot: "preview"
