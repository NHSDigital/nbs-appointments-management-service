parameters:
  - name: env
    type: string
  - name: variable_group
    type: string
  - name: apiServerName
    type: string
  - name: webServerName
    type: string
  - name: serviceConnectionName
    type: string
  - name: isMain
    type: string

stages:
  - stage: Deploy${{parameters.env}}
    displayName: Deploy ${{parameters.env}}
    dependsOn: Build
#    condition: and(succeeded(), eq(${{parameters.isMain}}, true))
    condition: succeeded()
    variables:
      - group: ${{parameters.variable_group}}
    jobs:
      - job: RunTerraformPlan
        displayName: "Run Terraform Plan"
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: Download Terraform Artifact
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop_terraform"
              downloadPath: $(Pipeline.Workspace)
          - task: AzureCLI@2
            displayName: "Run Terraform Plan"
            inputs:
              scriptType: pscore
              scriptLocation: inlineScript
              addSpnToEnvironment: true
              azureSubscription: ${{parameters.serviceConnectionName}}
              inlineScript: |
                $env:ARM_CLIENT_ID=$env:servicePrincipalId
                $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
                $env:ARM_TENANT_ID=$env:tenantId
                $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
                cd $(Pipeline.Workspace)\drop_terraform\environments\${{parameters.env}}
                terraform init
                terraform plan -no-color -input=false -var="GOV_NOTIFY_API_KEY=$(GOV_NOTIFY_API_KEY)"
      - job: ApproveTerraformPlan
        dependsOn: RunTerraformPlan
        displayName: "Approve Terraform Plan"
        pool: server
        steps:
          - task: ManualValidation@0
            displayName: "Review Terraform Plan"
            inputs:
              notifyUsers: ""
              instructions: Review plan and approve
      - deployment: ApplyTerraform
        dependsOn: ApproveTerraformPlan
        displayName: "Apply Terraform"
        environment: nbs-mya-${{parameters.env}}
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadBuildArtifacts@0
                  displayName: Download Terraform Artifact
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "drop_terraform"
                    downloadPath: $(Pipeline.Workspace)
                - task: AzureCLI@2
                  displayName: "Apply Terraform"
                  name: ApplyTerraformTask
                  inputs:
                    scriptType: pscore
                    scriptLocation: inlineScript
                    addSpnToEnvironment: true
                    azureSubscription: ${{parameters.serviceConnectionName}}
                    inlineScript: |
                      $env:ARM_CLIENT_ID=$env:servicePrincipalId
                      $env:ARM_CLIENT_SECRET=$env:servicePrincipalKey
                      $env:ARM_TENANT_ID=$env:tenantId
                      $env:ARM_SUBSCRIPTION_ID="$(azure_subscription_id)"
                      cd $(Pipeline.Workspace)\drop_terraform\environments\${{parameters.env}}
                      terraform init
                      terraform apply -no-color -input=false -auto-approve -var="GOV_NOTIFY_API_KEY=$(GOV_NOTIFY_API_KEY)"
      - job: DeployWeb
        dependsOn: ApplyTerraform
        displayName: "Deploy webapp"
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: "Download Web App Artifact"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop_web"
              downloadPath: $(Pipeline.Workspace)
          - task: AzureWebApp@1
            displayName: "Deploy Web App"
            inputs:
              azureSubscription: ${{parameters.serviceConnectionName}}
              appType: "webAppLinux"
              appName: ${{parameters.webServerName}}
              package: "$(Pipeline.Workspace)/drop_web/next.zip"
              deploymentMethod: "auto"
              startUpCommand: "node standalone/server.js"
      - job: DeployApi
        dependsOn: ApplyTerraform
        displayName: "Deploy Api"
        steps:
          - checkout: none
          - task: DownloadBuildArtifacts@0
            displayName: "Download Api Artifact"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop_api"
              downloadPath: $(Pipeline.Workspace)
          - task: AzureFunctionApp@2
            displayName: Deploy Api
            inputs:
              connectedServiceNameARM: ${{parameters.serviceConnectionName}}
              appType: "functionApp"
              appName: ${{parameters.apiServerName}}
              package: "$(Pipeline.Workspace)/**/*.zip"
              deploymentMethod: "auto"              
      - job: UploadCosmosDocuments
        displayName: "Upload documents to cosmosdb"
        variables:
          cosmosAccountName: nbs-mya-cdb-${{parameters.env}}-uks
        steps:
          - script: printenv
          - checkout: self
          - task: AzureCLI@2
            displayName: "Get Cosmos DB account connection string"
            inputs:
              azureSubscription: $(serviceConnectionName)
              scriptType: pscore
              scriptLocation: scriptPath
              scriptPath: "$(Build.SourcesDirectory)/scripts/cosmos-pr-build/get_cosmos_connection_string.ps1"
              arguments: '$(ENVIRONMENT) $(cosmosAccountName)'
          - task: DotNetCoreCLI@2
            displayName: "Seed Cosmos DB containers"
            inputs:
              command: "run"
              projects: "data/CosmosDbSeeder/CosmosDbSeeder.csproj"